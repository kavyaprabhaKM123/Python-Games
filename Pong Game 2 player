import turtle #Turtle is a Python module that provides a simple way to create graphics and animations by controlling a virtual "turtle" on the screen.

# Set up the game window
game_window = turtle.Screen() #initializes the graphics window where Turtle graphics and animations are displayed.
game_window.setup(width=900, height=600)
game_window.bgcolor("#0f0e17")  # Deep space blue background
game_window.title("My Awesome Pong Game")
game_window.tracer(0) #disables automatic screen updates to improve performance

# Game elements
left_paddle = turtle.Turtle() #Creates a drawable turtle
left_paddle.speed(0) #Ensuring rapid movement and drawing without animation delays
left_paddle.shape("square")
left_paddle.color("#ff8906")  # Vibrant orange
left_paddle.shapesize(stretch_wid=7, stretch_len=1)
left_paddle.penup() #This allows the turtle to move freely without creating any lines or marks
left_paddle.goto(-425, 0) #The turtle directly to the specified (x, y) coordinates on the screen without drawing a line if the pen is lifted

right_paddle = turtle.Turtle()
right_paddle.speed(0)
right_paddle.shape("square")
right_paddle.color("#e53170")  # Pinkish red
right_paddle.shapesize(stretch_wid=7, stretch_len=1)
right_paddle.penup()
right_paddle.goto(420, 0)

game_ball = turtle.Turtle()
game_ball.speed(0)
game_ball.shape("circle")
game_ball.color("#fffffe")  # Bright white
game_ball.penup()
game_ball.dx = 0.18  # Perfect speed for fun gameplay
game_ball.dy = 0.18

# Score system
my_score = 0
opponent_score = 0

score_display = turtle.Turtle()
score_display.speed(0)
score_display.color("#a7a9be")  # Light gray
score_display.penup()
score_display.hideturtle() #The turtle invisible on the screen
score_display.goto(0, 260)
score_display.write("Me: 0  Opponent: 0", align="center", font=("Verdana", 24, "normal"))

# Stylish center divider
center_line = turtle.Turtle()
center_line.speed(0)
center_line.color("#2e2f3e")  # Dark gray
center_line.penup()
center_line.goto(0, -300)
center_line.setheading(90)
center_line.pensize(2) #sets the width of the turtle's pen to 2 pixels
for _ in range(15):
    center_line.pendown()
    center_line.forward(20)
    center_line.penup()
    center_line.forward(20)

# Paddle movement functions
def move_left_up():
    y = left_paddle.ycor()
    if y < 250:
        left_paddle.sety(y + 30)

def move_left_down():
    y = left_paddle.ycor()
    if y > -240:
        left_paddle.sety(y - 30)

def move_right_up():
    y = right_paddle.ycor()
    if y < 250:
        right_paddle.sety(y + 30)

def move_right_down():
    y = right_paddle.ycor()
    if y > -240:
        right_paddle.sety(y - 30)

# Control setup
game_window.listen() #Method enables the program to detect and respond to keyboard input
game_window.onkeypress(move_left_up, 'w')
game_window.onkeypress(move_left_down, 's')
game_window.onkeypress(move_right_up, 'Up')
game_window.onkeypress(move_right_down, 'Down')

# Main game loop
while True:
    game_window.update() #Refreshes the graphics window, displaying all pending changes
    
    # Ball movement
    game_ball.setx(game_ball.xcor() + game_ball.dx)
    game_ball.sety(game_ball.ycor() + game_ball.dy)
    '''
- `turtle.Screen()`: Initializes the Turtle graphics window.  
- `game_window.listen()`: Enables detection of keyboard inputs.  
- `game_window.update()`: Refreshes the screen manually when `tracer(0)` is used.  
- `game_ball.setx()`: Updates the ball's X-coordinate for movement.  
- `game_ball.sety()`: Updates the ball's Y-coordinate for movement.  
- `penup()`: Lifts the pen to prevent drawing while moving the turtle.  
- `goto(x, y)`: Moves the turtle to the specified (x, y) coordinates.  
- `hideturtle()`: Hides the turtle's visual representation on the screen.  
- `speed(0)`: Sets the turtle's speed to the fastest mode for instant movements.  
    '''
    
    # Wall collisions
    if game_ball.ycor() > 290:
        game_ball.sety(290)
        game_ball.dy *= -1
        game_ball.color("#f25f4c")  # Change to coral color
    
    if game_ball.ycor() < -290:
        game_ball.sety(-290)
        game_ball.dy *= -1
        game_ball.color("#eebbc3")  # Change to pink color
    
    # Scoring zones
    if game_ball.xcor() > 440:  # Right side
        game_ball.goto(0, 0)
        game_ball.dx *= -1
        my_score += 1
        score_display.clear()
        score_display.write(f"Me: {my_score}  Opponent: {opponent_score}", 
                          align="center", font=("Verdana", 24, "normal"))
        game_ball.color("#fffffe")  # Reset color
    
    if game_ball.xcor() < -440:  # Left side
        game_ball.goto(0, 0)
        game_ball.dx *= -1
        opponent_score += 1
        score_display.clear()
        score_display.write(f"Me: {my_score}  Opponent: {opponent_score}", 
                          align="center", font=("Verdana", 24, "normal"))
        game_ball.color("#fffffe")  # Reset color
    
    # Paddle collisions with visual feedback
    if (400 < game_ball.xcor() < 410) and (right_paddle.ycor() - 70 < game_ball.ycor() < right_paddle.ycor() + 70):
        game_ball.setx(400)
        game_ball.dx *= -1.07  # Slight speed increase
        game_ball.color("#e53170")  # Match paddle color
    
    if (-410 < game_ball.xcor() < -400) and (left_paddle.ycor() - 70 < game_ball.ycor() < left_paddle.ycor() + 70):
        game_ball.setx(-400)
        game_ball.dx *= -1.07  # Slight speed increase
        game_ball.color("#ff8906")  # Match paddle color
